// Example: Using VL53L8CXModule for distance sensing
// This example shows how to integrate the VL53L8CX multi-zone ToF sensor module
// 
// Hardware Requirements:
// - VL53L8CX Time-of-Flight sensors (1-8 sensors)
// - TCA9548A I2C multiplexer (address 0x70)
// - Teensy 4.1 microcontroller
//
// Wiring:
// - VL53L8CX SDA -> TCA9548A SCx (channel 0-7)
// - VL53L8CX SCL -> TCA9548A SDx (channel 0-7)  
// - TCA9548A SDA -> Teensy SDA (pin 18)
// - TCA9548A SCL -> Teensy SCL (pin 19)
// - All VCC to 3.3V, all GND to GND

#include "vl53l8cx_module.h"
#include "module.h"

void setup() {
    Serial.begin(115200);
    
    // Wait for serial connection (optional for debugging)
    while (!Serial && millis() < 5000);
    
    Serial.println("VL53L8CX Multi-Zone ToF Sensor Example Starting...");
    
    // Initialize the VL53L8CX module singleton
    // This automatically registers it with the module system
    VL53L8CXModule::singleton();
    
    // Initialize all modules (including VL53L8CX)
    Module::Setup();
    
    Serial.println("VL53L8CX Distance Sensor Example Ready");
    Serial.println("Expected serial output format: VL53L8CX_DISTANCE:sensor_id,distance_mm");
}

void loop() {
    // Run all modules (including VL53L8CX)
    Module::Loop();
    
    // Example: Get distance from sensor 0 manually
    static uint32_t last_manual_read = 0;
    uint32_t current_time = millis();
    
    if (current_time - last_manual_read >= 1000) { // Every 1 second
        auto& vl53l8cx = VL53L8CXModule::singleton();
        
        float distance = vl53l8cx.getDistanceMm(0);
        
        if (isnan(distance)) {
            Serial.println("Manual read: Sensor 0 - No valid distance (sensor not initialized or no target)");
        } else {
            Serial.printf("Manual read: Sensor 0 center zone distance: %.1f mm\n", distance);
        }
        
        // Check sensor status
        if (vl53l8cx.isSensorInitialized(0)) {
            Serial.println("Manual read: Sensor 0 is initialized and working");
        } else {
            Serial.println("Manual read: Sensor 0 failed to initialize");
        }
        
        last_manual_read = current_time;
    }
    
    // The module automatically sends distance data every 10ms via serial:
    // Format: "VL53L8CX_DISTANCE:sensor_id,distance_mm"
    // This represents the center zone distance from the multi-zone VL53L8CX sensor
    // Example: "VL53L8CX_DISTANCE:0,123.4"
    // Example: "VL53L8CX_DISTANCE:0,NAN" (if sensor not working or no target detected)
}

/*
Expected Serial Output:
======================

VL53L8CXModule: Configured for 1 sensors
VL53L8CXModule: Starting sensor initialization...
VL53L8CX: Successfully initialized sensor 0
VL53L8CXModule: 1/1 sensors initialized
VL53L8CX Multi-Zone ToF Sensor Example Starting...
VL53L8CX Distance Sensor Example Ready
Expected serial output format: VL53L8CX_DISTANCE:sensor_id,distance_mm

VL53L8CX_DISTANCE:0,150.0
VL53L8CX_DISTANCE:0,145.2
VL53L8CX_DISTANCE:0,155.8
Manual read: Sensor 0 center zone distance: 150.0 mm
Manual read: Sensor 0 is initialized and working
VL53L8CX_DISTANCE:0,148.1
VL53L8CX_DISTANCE:0,152.3
...

Notes:
======
1. VL53L8CX is a multi-zone ToF sensor (4x4 or 8x8 zones)
2. This module reports center zone distance for simplicity
3. Distance data is automatically sent every 10ms per enabled sensor
4. To enable more sensors, change ENABLED_SENSORS constant in the header
5. The module handles I2C multiplexer switching automatically
6. NAN is reported for sensors that fail to initialize or have no valid target
7. The module integrates with the safety system (isUnsafe() for obstacles < 50mm)
8. All timing is non-blocking to maintain real-time performance
9. Sensor runs at 100Hz frequency with 4x4 resolution by default for fast updates
*/
