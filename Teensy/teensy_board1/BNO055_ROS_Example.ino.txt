// Example: Using BNO055Module with ROS Integration
// This example shows how to integrate the BNO055 sensor data with ROS

#include "bno055_module.h"

void setup() {
    Serial.begin(115200);
    
    // Module is automatically initialized as singleton
    // No manual setup needed
}

void loop() {
    // Example 1: Get raw BNO055 data (native format)
    auto& bno = BNO055Module::singleton();
    
    for (uint8_t chip = 0; chip < bno.getChipCount(); chip++) {
        IMUData data;
        if (bno.getIMUData(chip, data)) {
            Serial.printf("Chip %d - BNO055 format:\n", chip);
            Serial.printf("  Quat: w=%.4f, x=%.4f, y=%.4f, z=%.4f\n", 
                         data.qw, data.qx, data.qy, data.qz);
        }
    }
    
    // Example 2: Get ROS-compatible data (converted format)
    for (uint8_t chip = 0; chip < bno.getChipCount(); chip++) {
        float qx, qy, qz, qw;
        float gx, gy, gz;
        float ax, ay, az;
        
        if (bno.getIMUDataROS(chip, qx, qy, qz, qw, gx, gy, gz, ax, ay, az)) {
            Serial.printf("Chip %d - ROS format:\n", chip);
            Serial.printf("  Quat: x=%.4f, y=%.4f, z=%.4f, w=%.4f\n", qx, qy, qz, qw);
            Serial.printf("  Gyro: x=%.4f, y=%.4f, z=%.4f rad/s\n", gx, gy, gz);
            Serial.printf("  Accel: x=%.4f, y=%.4f, z=%.4f m/s²\n", ax, ay, az);
            
            // This data is ready to be published to ROS topics like:
            // sensor_msgs::Imu message with:
            // - orientation.x = qx, orientation.y = qy, orientation.z = qz, orientation.w = qw
            // - angular_velocity.x = gx, angular_velocity.y = gy, angular_velocity.z = gz
            // - linear_acceleration.x = ax, linear_acceleration.y = ay, linear_acceleration.z = az
        }
    }
    
    // Example 3: Manual conversion for custom use cases
    IMUData raw_data;
    if (bno.getIMUData(0, raw_data)) {
        float ros_qx, ros_qy, ros_qz, ros_qw;
        BNO055Module::convertQuaternionToROS(raw_data.qw, raw_data.qx, raw_data.qy, raw_data.qz,
                                           ros_qx, ros_qy, ros_qz, ros_qw);
        
        Serial.printf("Manual conversion:\n");
        Serial.printf("  BNO055: w=%.4f, x=%.4f, y=%.4f, z=%.4f\n", 
                     raw_data.qw, raw_data.qx, raw_data.qy, raw_data.qz);
        Serial.printf("  ROS:    x=%.4f, y=%.4f, z=%.4f, w=%.4f\n", 
                     ros_qx, ros_qy, ros_qz, ros_qw);
    }
    
    delay(1000); // Update every second for this example
}

/*
Expected Output:
================

Chip 0 - BNO055 format:
  Quat: w=0.9998, x=0.0123, y=-0.0045, z=0.0167

Chip 0 - ROS format:
  Quat: x=-0.0045, y=-0.0123, z=0.0167, w=0.9998
  Gyro: x=-0.003, y=-0.012, z=0.001 rad/s
  Accel: x=-0.01, y=-0.02, z=9.81 m/s²

Manual conversion:
  BNO055: w=0.9998, x=0.0123, y=-0.0045, z=0.0167
  ROS:    x=-0.0045, y=-0.0123, z=0.0167, w=0.9998

Notes:
======
1. The quaternion order changes from (w,x,y,z) to (x,y,z,w)
2. The coordinate system transforms from BNO055 to ROS conventions
3. X and Y components have their signs flipped due to coordinate system differences
4. This data is ready for direct use in ROS sensor_msgs/Imu messages
*/
