// Example: Using VL53L0XModule for distance sensing
// This example shows how to integrate the VL53L0X Time-of-Flight sensor module
// 
// Hardware Requirements:
// - VL53L0X Time-of-Flight sensors (1-8 sensors)
// - TCA9548A I2C multiplexer (address 0x70) - REQUIRED
// - Teensy 4.1 microcontroller
//
// Wiring:
// - VL53L0X SDA -> TCA9548A SCx (channel 0-7)
// - VL53L0X SCL -> TCA9548A SDx (channel 0-7)  
// - TCA9548A SDA -> Teensy SDA (pin 18)
// - TCA9548A SCL -> Teensy SCL (pin 19)
// - All VCC to 3.3V, all GND to GND

#include "vl53l0x_module.h"
#include "module.h"

void setup() {
    Serial.begin(115200);
    
    // Wait for serial connection (optional for debugging)
    while (!Serial && millis() < 5000);
    
    Serial.println("VL53L0X Time-of-Flight Sensor Example Starting...");
    
    // Initialize the VL53L0X module singleton
    // This automatically registers it with the module system
    VL53L0XModule::singleton();
    
    // Initialize all modules (including VL53L0X)
    Module::Setup();
    
    Serial.println("VL53L0X Distance Sensor Example Ready");
    Serial.println("Expected serial output format: VL53L0X_DISTANCES:sensor_id:distance_mm,sensor_id:distance_mm,...");
}

void loop() {
    // Run all modules (including VL53L0X)
    Module::Loop();
    
    // Example: Get distance from sensor 0 manually
    static uint32_t last_manual_read = 0;
    uint32_t current_time = millis();
    
    if (current_time - last_manual_read >= 1000) { // Every 1 second
        auto& vl53l0x = VL53L0XModule::singleton();
        
        float distance = vl53l0x.getDistanceMm(0);
        
        if (isnan(distance)) {
            Serial.println("Manual read: Sensor 0 - No valid distance (sensor not initialized or timeout)");
        } else {
            Serial.printf("Manual read: Sensor 0 distance: %.1f mm\n", distance);
        }
        
        // Check sensor status
        if (vl53l0x.isSensorInitialized(0)) {
            Serial.println("Manual read: Sensor 0 is initialized and working");
        } else {
            Serial.println("Manual read: Sensor 0 failed to initialize");
        }
        
        // Check safety status
        if (vl53l0x.isUnsafe()) {
            Serial.println("Manual read: SAFETY WARNING - Obstacle detected within 50mm!");
        }
        
        last_manual_read = current_time;
    }
    
    // The module automatically sends distance data every 50ms via serial:
    // Format: "VL53L0X_DISTANCES:sensor_id:distance_mm,sensor_id:distance_mm,..."
    // Example: "VL53L0X_DISTANCES:0:123.4,1:145.2,2:NAN,3:201.8"
    // Example: "VL53L0X_DISTANCES:0:NAN" (if sensor not working or timeout)
}

/*
Expected Serial Output:
======================

/*
Expected Serial Output (normal operation):
=========================================

VL53L0XModule: Configured for 4 sensors
VL53L0XModule: Starting sensor initialization...
VL53L0XModule: I2C multiplexer found at address 0x70
VL53L0XModule: Sensor 0 initialized successfully
VL53L0XModule: Sensor 1 initialized successfully
VL53L0XModule: Sensor 2 initialized successfully  
VL53L0XModule: Sensor 3 initialized successfully
VL53L0XModule: 4/4 sensors initialized
VL53L0X Time-of-Flight Sensor Example Starting...
VL53L0X Distance Sensor Example Ready
Expected serial output format: VL53L0X_DISTANCES:sensor_id:distance_mm,sensor_id:distance_mm,...

VL53L0X_DISTANCES:0:150.0,1:145.2,2:155.8,3:NAN,[4/4 active]
VL53L0X_DISTANCES:0:148.1,1:143.5,2:152.3,3:NAN,[4/4 active]
Manual read: Sensor 0 distance: 150.0 mm
Manual read: Sensor 0 is initialized and working
VL53L0X_DISTANCES:0:151.2,1:146.8,2:158.1,3:NAN,[4/4 active]
...

Expected Serial Output (multiplexer failure):
=============================================

VL53L0XModule: Configured for 4 sensors
VL53L0XModule: Starting sensor initialization...
VL53L0XModule: I2C multiplexer NOT found at address 0x70 (error: 2)
VL53L0XModule: I2C multiplexer not found, sensor initialization aborted
VL53L0X Time-of-Flight Sensor Example Starting...
VL53L0X Distance Sensor Example Ready
Expected serial output format: VL53L0X_DISTANCES:sensor_id:distance_mm,sensor_id:distance_mm,...

VL53L0X_DISTANCES:0:NAN,1:NAN,2:NAN,3:NAN,[0/4 active]
VL53L0X_DISTANCES:0:NAN,1:NAN,2:NAN,3:NAN,[0/4 active]
Manual read: Sensor 0 - No valid distance (sensor not initialized or timeout)
Manual read: Sensor 0 failed to initialize
...

Notes:
======
1. VL53L0X is a single-zone ToF sensor (simpler than VL53L8CX)
2. Distance data is automatically sent every 50ms for all enabled sensors in one message
3. To enable more sensors, change ENABLED_SENSORS constant in the header (default is 4)
4. The TCA9548A I2C multiplexer is REQUIRED - the module will not initialize without it
5. NAN is reported for sensors that fail to initialize or have timeouts
6. The module integrates with the safety system (isUnsafe() for obstacles < 50mm)
7. All timing is non-blocking to maintain real-time performance
8. Sensor runs continuously with 50ms period and 33ms timing budget for good performance
9. When using multiplexer, all sensors use the same I2C address (0x29)
10. Timeout is set to 70ms to handle occasional measurement delays
11. **No fallback mode**: If multiplexer fails, no sensors will be initialized

Troubleshooting:
===============
- If "I2C multiplexer NOT found", check TCA9548A wiring and power (address 0x70)
- If "Failed to initialize sensor", check VL53L0X wiring and power (3.3V)
- If getting NAN values, check for loose connections or interference
- Distance range is typically 30mm to 2000mm (varies with target material)
- The TCA9548A I2C multiplexer is REQUIRED for this module to function
- All sensors must be connected through the multiplexer
*/

Configuration Summary:
======================
- ENABLED_SENSORS = 4 (change in vl53l0x_module.h)
- Data output interval = 50ms
- Safety threshold = 50mm (defined in module)
- I2C speed = 400kHz
- Sensor timeout = 70ms
- Measurement timing budget = 33ms
- Continuous mode with 50ms period
- Multiplexer address = 0x70 (TCA9548A) - REQUIRED
- VL53L0X default address = 0x29

To modify the configuration:
1. Change ENABLED_SENSORS in vl53l0x_module.h
2. Modify timing intervals in constructor if needed
3. Adjust safety threshold if required
4. TCA9548A multiplexer is mandatory for operation

For best performance:
- Use 3.3V power supply for VL53L0X sensors and TCA9548A
- Keep I2C wires short and twisted
- Add 10kÎ© pull-up resistors on SDA/SCL if needed
- Avoid reflective or transparent surfaces for measurements
- Ensure TCA9548A is properly powered and connected
*/
