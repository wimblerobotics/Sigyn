# Dockerfile for Sigyn on AMD64 with ROS 2 Jazzy and Gazebo Harmonic
# This is intended for use on ARM hosts via emulation.

# Use Ubuntu 22.04 (Jammy) as the base image for better QEMU stability.
FROM ubuntu:22.04

# Set non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive

# --- STAGE 1: Fix the base image's broken GPG key ---

# 1. Temporarily disable GPG verification to allow installation of prerequisites.
RUN echo 'Acquire::AllowInsecureRepositories "true";' > /etc/apt/apt.conf.d/99-insecure

# 2. In this insecure state, run update and install the tools needed to fix the keys.
RUN apt-get update && apt-get install -y --allow-unauthenticated \
    curl \
    gnupg \
    lsb-release \
    software-properties-common

# 3. Manually fetch and install the specific missing Ubuntu GPG key.
#    Use --batch and --yes to ensure gpg runs non-interactively.
RUN curl -sS "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x871920D1991BC93C" | gpg --batch --yes --dearmor -o /usr/share/keyrings/ubuntu-archive-keyring.gpg

# 4. Remove the temporary insecure configuration file to restore security.
RUN rm /etc/apt/apt.conf.d/99-insecure

# 5. Run a final, fully secure update to confirm the base image is fixed.
#    This step is crucial. It must pass without any GPG errors.
RUN apt-get update

# --- STAGE 2: Install ROS 2 and other dependencies ---

# Add the universe repository, which contains many ROS dependencies.
RUN add-apt-repository universe

# Now, follow the official ROS 2 installation procedure.
# First, get the ROS GPG key.
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg

# Second, add the ROS repository to the sources list.
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# Update the package list again to include the new ROS packages.
RUN apt-get update

# Install system dependencies and ROS packages in a single layer to optimize caching.
RUN apt-get install -y \
    locales \
    tzdata \
    build-essential \
    cmake \
    git \
    python3-pip \
    wget \
    ros-jazzy-desktop-full \
    ros-jazzy-ros-gz \
    ros-jazzy-navigation2 \
    ros-jazzy-nav2-bringup \
    ros-jazzy-slam-toolbox \
    ros-jazzy-robot-localization \
    ros-jazzy-joint-state-publisher-gui \
    ros-jazzy-xacro \
    ros-jazzy-cartographer-ros \
    python3-seaborn \
    liburdfdom-tools

# --- STAGE 3: Configure the environment ---

# Configure locale and timezone
RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && locale-gen
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8
RUN ln -snf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime && echo America/Los_Angeles > /etc/timezone

# Clean up apt cache
RUN rm -rf /var/lib/apt/lists/*

# --- STAGE 4: User and Workspace Setup ---
RUN apt-get update && apt-get install -y sudo && \
    if ! getent group 1001 > /dev/null 2>&1; then \
        groupadd --gid 1001 ros; \
    fi && \
    if ! id 1001 > /dev/null 2>&1; then \
        useradd --uid 1001 --gid 1001 --shell /bin/bash --create-home ros; \
    fi && \
    echo "ros ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

USER ros
WORKDIR /home/ros

# Create the main Sigyn workspace
RUN mkdir -p /home/ros/sigyn_ws/src

# Set up the entrypoint environment
RUN echo "source /opt/ros/jazzy/setup.bash" >> /home/ros/.bashrc && \
    echo "if [ -f /home/ros/sigyn_ws/install/setup.bash ]; then source /home/ros/sigyn_ws/install/setup.bash; fi" >> /home/ros/.bashrc

# Set the entrypoint to bash
CMD ["/bin/bash"]