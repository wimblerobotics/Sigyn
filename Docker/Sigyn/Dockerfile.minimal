# Dockerfile for Sigyn Robot Development Environment - Minimal Version
# 
# This is a stripped-down version for testing network connectivity issues
# Use this if the full Dockerfile fails to build
#
# Author: Sigyn Development Team
# Version: 2.0-minimal

FROM osrf/ros:jazzy-desktop-full

# Build arguments for user configuration
ARG USERNAME=ros
ARG USER_UID=1000
ARG USER_GID=1000

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV ROS_DISTRO=jazzy
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV PYTHONUNBUFFERED=1

# GUI and graphics environment variables for X11 forwarding
ENV DISPLAY=:0
ENV QT_X11_NO_MITSHM=1

# ROS2 DDS configuration for better network performance
ENV RMW_IMPLEMENTATION=rmw_cyclonedx_cpp

# Remove snap packages to prevent conflicts
RUN if dpkg -l | grep -q snapd; then \
        apt-get update && \
        apt-get purge -y snapd && \
        apt-get autoremove -y && \
        rm -rf /var/lib/snapd /snap /var/snap; \
    fi && \
    echo 'Package: snapd' > /etc/apt/preferences.d/nosnap.pref && \
    echo 'Pin: release a=*' >> /etc/apt/preferences.d/nosnap.pref && \
    echo 'Pin-Priority: -10' >> /etc/apt/preferences.d/nosnap.pref && \
    rm -rf /var/lib/apt/lists/* || true

# Install only essential packages first
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    curl \
    sudo \
    ca-certificates \
    gnupg \
    lsb-release \
    && rm -rf /var/lib/apt/lists/*

# Install Python development packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-pip \
    python3-dev \
    python3-venv \
    python3-setuptools \
    python3-wheel \
    && rm -rf /var/lib/apt/lists/*

# Create ros user with proper UID/GID
RUN groupadd --gid ${USER_GID} ${USERNAME} && \
    useradd --uid ${USER_UID} --gid ${USER_GID} --shell /bin/bash --create-home ${USERNAME} && \
    echo "${USERNAME} ALL=(root) NOPASSWD:ALL" > /etc/sudoers.d/${USERNAME} && \
    chmod 0440 /etc/sudoers.d/${USERNAME}

# Add ros user to dialout group for serial access
RUN usermod -a -G dialout ${USERNAME}

# Switch to ros user for environment setup
USER ${USERNAME}
WORKDIR /home/${USERNAME}

# Set up basic .bashrc with ROS2 environment
RUN echo "# Sigyn Robot Development Environment - Minimal" > ~/.bashrc && \
    echo "source /opt/ros/\${ROS_DISTRO}/setup.bash" >> ~/.bashrc && \
    echo "source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash" >> ~/.bashrc && \
    echo "alias cb='colcon build --symlink-install'" >> ~/.bashrc && \
    echo "alias ll='ls -alF'" >> ~/.bashrc && \
    echo "export PATH=\"\$PATH:/home/${USERNAME}/.local/bin\"" >> ~/.bashrc

# Switch back to root for final system configuration
USER root

# Create entrypoint script
RUN echo '#!/bin/bash' > /entrypoint.sh && \
    echo 'set -e' >> /entrypoint.sh && \
    echo 'if [ -n "${USER_ID}" ] && [ -n "${GROUP_ID}" ]; then' >> /entrypoint.sh && \
    echo '    groupmod -g ${GROUP_ID} ros 2>/dev/null || true' >> /entrypoint.sh && \
    echo '    usermod -u ${USER_ID} -g ${GROUP_ID} ros 2>/dev/null || true' >> /entrypoint.sh && \
    echo '    chown -R ${USER_ID}:${GROUP_ID} /home/ros 2>/dev/null || true' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo 'source /opt/ros/${ROS_DISTRO}/setup.bash' >> /entrypoint.sh && \
    echo 'if [ $# -eq 0 ]; then' >> /entrypoint.sh && \
    echo '    exec su - ros' >> /entrypoint.sh && \
    echo 'else' >> /entrypoint.sh && \
    echo '    exec su - ros -c "$*"' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

# Set proper permissions
RUN chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}

# Final switch to ros user
USER ${USERNAME}
WORKDIR /home/${USERNAME}

# Set default entrypoint
ENTRYPOINT ["/entrypoint.sh"]
CMD ["/bin/bash"]
