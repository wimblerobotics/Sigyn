FROM osrf/ros:jazzy-desktop-full

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TERM=xterm-256color

# Set up workspace-agnostic environment
ENV ROS_DOMAIN_ID=0
ENV RMW_IMPLEMENTATION=rmw_cyclonedx_cpp

# Add metadata
ARG BUILD_DATE
ARG VCS_REF
LABEL maintainer="Sigyn Robot Development Team"
LABEL build_date=$BUILD_DATE
LABEL vcs_ref=$VCS_REF
LABEL description="Workspace-agnostic development environment for Sigyn Robot"

# Install essential packages and gosu first
RUN apt-get update && apt-get install -y \
    sudo \
    gosu \
    && rm -rf /var/lib/apt/lists/*

# Set up the ros user (rename ubuntu to ros and setup sudo)
RUN usermod -l ros ubuntu && \
    usermod -d /home/ros -m ros && \
    groupmod -n ros ubuntu && \
    echo ros ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/ros && \
    chmod 0440 /etc/sudoers.d/ros

# Install all development packages during build (avoid runtime installation)
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Development tools
    build-essential \
    cmake \
    git \
    wget \
    curl \
    vim \
    nano \
    bash-completion \
    tree \
    htop \
    tmux \
    screen \
    # Version control and debugging
    gdb \
    valgrind \
    strace \
    # System libraries and hardware support
    libudev-dev \
    nlohmann-json3-dev \
    pkg-config \
    # USB and hardware support
    usbutils \
    # Network tools
    iputils-ping \
    net-tools \
    iproute2 \
    # X11 and GUI support for Gazebo/RViz2/Arduino IDE/VSCode
    x11-apps \
    x11-utils \
    x11-xserver-utils \
    xauth \
    xvfb \
    mesa-utils \
    libgl1-mesa-dev \
    libgl1-mesa-dri \
    libglu1-mesa \
    libglx-mesa0 \
    libxext6 \
    libx11-6 \
    libxrandr2 \
    libxss1 \
    libxcursor1 \
    libxcomposite1 \
    libxi6 \
    libxtst6 \
    libxrender1 \
    libxfixes3 \
    libxdamage1 \
    libasound2t64 \
    # OpenGL support
    libgl1 \
    libglvnd0 \
    libglx0 \
    libglvnd-dev \
    # Additional tools
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    # Serial communication dependencies
    python3-serial \
    minicom \
    picocom \
    && rm -rf /var/lib/apt/lists/*

# Create workspace-agnostic .bashrc that will source any available workspace
RUN echo '#!/bin/bash' > /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Source ROS2 setup' >> /home/ros/.bashrc && \
    echo 'source /opt/ros/jazzy/setup.bash' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Auto-source any workspace found in common locations' >> /home/ros/.bashrc && \
    echo 'WORKSPACE_PATHS=("/workspace" "/home/ros/ws" "/ws" "/colcon_ws" "/sigyn_ws")' >> /home/ros/.bashrc && \
    echo 'for ws_path in "${WORKSPACE_PATHS[@]}"; do' >> /home/ros/.bashrc && \
    echo '    if [ -f "$ws_path/install/setup.bash" ]; then' >> /home/ros/.bashrc && \
    echo '        echo "Sourcing workspace: $ws_path"' >> /home/ros/.bashrc && \
    echo '        source "$ws_path/install/setup.bash"' >> /home/ros/.bashrc && \
    echo '        export ROS_WORKSPACE="$ws_path"' >> /home/ros/.bashrc && \
    echo '        break' >> /home/ros/.bashrc && \
    echo '    fi' >> /home/ros/.bashrc && \
    echo 'done' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Useful aliases' >> /home/ros/.bashrc && \
    echo 'alias cb="colcon build --symlink-install"' >> /home/ros/.bashrc && \
    echo 'alias ct="colcon test"' >> /home/ros/.bashrc && \
    echo 'alias ll="ls -la"' >> /home/ros/.bashrc && \
    echo 'alias l="ls -l"' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Set up colcon completion' >> /home/ros/.bashrc && \
    echo 'if command -v colcon >/dev/null 2>&1; then' >> /home/ros/.bashrc && \
    echo '    source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash' >> /home/ros/.bashrc && \
    echo 'fi' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    chown ros:ros /home/ros/.bashrc

# Create lightweight entrypoint script
RUN echo '#!/bin/bash' > /usr/local/bin/docker-entrypoint.sh && \
    echo 'set -e' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '# Handle user/group ID mapping from environment variables' >> /usr/local/bin/docker-entrypoint.sh && \
    echo 'if [ -n "$USER_ID" ] && [ -n "$GROUP_ID" ]; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    current_uid=$(id -u ros)' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    current_gid=$(id -g ros)' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    if [ "$current_uid" != "$USER_ID" ]; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        echo "Mapping user ID $current_uid -> $USER_ID"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        usermod -u $USER_ID ros 2>/dev/null || echo "Could not change user ID"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    fi' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    if [ "$current_gid" != "$GROUP_ID" ]; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        echo "Mapping group ID $current_gid -> $GROUP_ID"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        groupmod -g $GROUP_ID ros 2>/dev/null || echo "Could not change group ID"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    fi' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    # Fix ownership of home directory' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    chown -R ros:ros /home/ros 2>/dev/null || true' >> /usr/local/bin/docker-entrypoint.sh && \
    echo 'fi' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '# Handle udev rules from mounted workspace (only if privileged)' >> /usr/local/bin/docker-entrypoint.sh && \
    echo 'if [ "$EUID" -eq 0 ]; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    for ws_path in /workspace /home/ros/ws /ws /colcon_ws /sigyn_ws; do' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        if [ -d "$ws_path/src" ] && find "$ws_path" -name "*.rules" -type f | head -1 >/dev/null 2>&1; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '            echo "Copying udev rules from workspace: $ws_path"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '            find "$ws_path" -name "*.rules" -exec cp {} /etc/udev/rules.d/ \; 2>/dev/null || echo "Could not copy udev rules"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '            break' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        fi' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    done' >> /usr/local/bin/docker-entrypoint.sh && \
    echo 'fi' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '# Switch to ros user and execute command' >> /usr/local/bin/docker-entrypoint.sh && \
    echo 'if [ "$#" -eq 0 ]; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    exec gosu ros bash' >> /usr/local/bin/docker-entrypoint.sh && \
    echo 'else' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    exec gosu ros "$@"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo 'fi' >> /usr/local/bin/docker-entrypoint.sh && \
    chmod +x /usr/local/bin/docker-entrypoint.sh

# Set the user and working directory
USER ros
WORKDIR /home/ros

# Set the entrypoint
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
CMD ["bash"]
