FROM osrf/ros:jazzy-desktop-full

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TERM=xterm-256color

# Set up workspace-agnostic environment
ENV ROS_DOMAIN_ID=0
ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

# Add metadata
ARG BUILD_DATE
ARG VCS_REF
LABEL maintainer="Sigyn Robot Development Team"
LABEL build_date=$BUILD_DATE
LABEL vcs_ref=$VCS_REF
LABEL description="Workspace-agnostic development environment for Sigyn Robot"

# Install essential packages and gosu first
RUN apt-get update && apt-get install -y \
    sudo \
    gosu \
    && rm -rf /var/lib/apt/lists/*

# Set up the ros user (rename ubuntu to ros and setup sudo)
RUN usermod -l ros ubuntu && \
    usermod -d /home/ros -m ros && \
    groupmod -n ros ubuntu && \
    echo ros ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/ros && \
    chmod 0440 /etc/sudoers.d/ros

# Install all development packages during build (avoid runtime installation)
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Development tools
    build-essential \
    cmake \
    git \
    wget \
    curl \
    vim \
    nano \
    bash-completion \
    tree \
    htop \
    tmux \
    screen \
    # Version control and debugging
    gdb \
    valgrind \
    strace \
    # System libraries and hardware support
    libudev-dev \
    nlohmann-json3-dev \
    pkg-config \
    # USB and hardware support
    usbutils \
    # Network tools
    iputils-ping \
    net-tools \
    iproute2 \
    # X11 and GUI support for Gazebo/RViz2/Arduino IDE/VSCode
    x11-apps \
    x11-utils \
    x11-xserver-utils \
    xauth \
    xvfb \
    mesa-utils \
    libgl1-mesa-dev \
    libgl1-mesa-dri \
    libglu1-mesa \
    libglx-mesa0 \
    libxext6 \
    libx11-6 \
    libxrandr2 \
    libxss1 \
    libxcursor1 \
    libxcomposite1 \
    libxi6 \
    libxtst6 \
    libxrender1 \
    libxfixes3 \
    libxdamage1 \
    libasound2t64 \
    # OpenGL support
    libgl1 \
    libglvnd0 \
    libglx0 \
    libglvnd-dev \
    # Additional tools
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    # Serial communication dependencies
    python3-serial \
    minicom \
    picocom \
    && rm -rf /var/lib/apt/lists/*

# Add Microsoft repository for VS Code
RUN wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg && \
    install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/ && \
    echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list

# Install additional system dependencies found in workspace analysis
RUN apt-get update && apt-get install -y \
    # OpenCV and image processing libraries
    libopencv-dev \
    python3-opencv \
    # YAML and configuration libraries
    libyaml-cpp-dev \
    # Geometry libraries
    libeigen3-dev \
    # Python packages for robotics
    python3-pip \
    python3-dev \
    python3-setuptools \
    python3-wheel \
    python3-numpy \
    python3-scipy \
    python3-matplotlib \
    # USB and hardware interface packages
    libusb-1.0-0-dev \
    # Additional development tools
    socat \
    && rm -rf /var/lib/apt/lists/*

# Install additional ROS2 packages and VS Code based on workspace dependencies
RUN apt-get update && apt-get install -y \
    # Core ROS2 control packages
    ros-jazzy-controller-manager \
    ros-jazzy-ros2-control \
    ros-jazzy-ros2-controllers \
    ros-jazzy-hardware-interface \
    ros-jazzy-controller-interface \
    ros-jazzy-joint-state-broadcaster \
    ros-jazzy-joint-state-publisher \
    ros-jazzy-joint-state-publisher-gui \
    ros-jazzy-forward-command-controller \
    ros-jazzy-ros2controlcli \
    # Movement and control
    ros-jazzy-diff-drive-controller \
    ros-jazzy-velocity-controllers \
    ros-jazzy-position-controllers \
    ros-jazzy-effort-controllers \
    # CycloneDDS middleware
    ros-jazzy-cyclonedds \
    ros-jazzy-rmw-cyclonedds-cpp \
    # Navigation and behavior trees (from workspace analysis)
    ros-jazzy-behaviortree-cpp \
    ros-jazzy-nav2-behaviors \
    ros-jazzy-nav2-behavior-tree \
    ros-jazzy-nav2-bringup \
    ros-jazzy-nav2-common \
    ros-jazzy-nav2-core \
    ros-jazzy-nav2-msgs \
    ros-jazzy-nav2-smac-planner \
    ros-jazzy-nav2-util \
    ros-jazzy-navigation2 \
    # Localization and mapping
    ros-jazzy-cartographer \
    ros-jazzy-cartographer-ros \
    ros-jazzy-robot-localization \
    ros-jazzy-pointcloud-to-laserscan \
    ros-jazzy-laser-filters \
    # Visualization and RViz
    ros-jazzy-rviz2 \
    ros-jazzy-rviz-common \
    ros-jazzy-rviz-ogre-vendor \
    ros-jazzy-robot-state-publisher \
    # Additional perception and utilities
    ros-jazzy-cv-bridge \
    ros-jazzy-image-transport \
    ros-jazzy-vision-opencv \
    ros-jazzy-pcl-conversions \
    ros-jazzy-pcl-ros \
    ros-jazzy-backward-ros \
    ros-jazzy-launch-ros \
    ros-jazzy-tf2 \
    ros-jazzy-tf2-ros \
    ros-jazzy-tf2-geometry-msgs \
    ros-jazzy-xacro \
    # Additional packages from workspace analysis
    ros-jazzy-geometry-msgs \
    ros-jazzy-sensor-msgs \
    ros-jazzy-std-msgs \
    ros-jazzy-nav-msgs \
    ros-jazzy-diagnostic-msgs \
    ros-jazzy-trajectory-msgs \
    ros-jazzy-visualization-msgs \
    ros-jazzy-action-msgs \
    ros-jazzy-builtin-interfaces \
    ros-jazzy-unique-identifier-msgs \
    # Gazebo Harmonic packages (gz-* based)
    ros-jazzy-ros-gz-bridge \
    ros-jazzy-ros-gz-image \
    ros-jazzy-ros-gz-interfaces \
    ros-jazzy-ros-gz-sim \
    ros-jazzy-ros-gz-sim-demos \
    ros-jazzy-gz-ros2-control \
    ros-jazzy-urdf \
    ros-jazzy-kdl-parser \
    # Communication and interfaces
    ros-jazzy-rclcpp \
    ros-jazzy-rclpy \
    ros-jazzy-lifecycle-msgs \
    ros-jazzy-rosidl-default-generators \
    ros-jazzy-rosidl-default-runtime \
    # System packages and development tools
    ros-jazzy-rosidl-generator-type-description \
    ros-jazzy-pluginlib \
    code \
    && rm -rf /var/lib/apt/lists/*

# Install Arduino IDE 2.x
RUN wget -O /tmp/arduino-ide.AppImage https://downloads.arduino.cc/arduino-ide/arduino-ide_2.3.3_Linux_64bit.AppImage && \
    chmod +x /tmp/arduino-ide.AppImage && \
    mkdir -p /opt/arduino-ide && \
    cd /opt/arduino-ide && \
    /tmp/arduino-ide.AppImage --appimage-extract && \
    ln -sf /opt/arduino-ide/squashfs-root/AppRun /usr/local/bin/arduino-ide && \
    rm /tmp/arduino-ide.AppImage

# Install pipx and PlatformIO Core with Teensy support
RUN apt-get update && apt-get install -y python3-venv python3-full pipx && \
    rm -rf /var/lib/apt/lists/* && \
    python3 -m pipx install platformio && \
    python3 -m pipx ensurepath

# Install Teensy platform and tools for PlatformIO (as ros user)
USER ros
RUN /home/ros/.local/bin/pio platform install teensy && \
    mkdir -p /home/ros/.platformio

# Switch back to root for rest of setup
USER root

# Create workspace-agnostic .bashrc that will source any available workspace
RUN echo '#!/bin/bash' > /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Add pipx to PATH' >> /home/ros/.bashrc && \
    echo 'export PATH="/home/ros/.local/bin:$PATH"' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Source ROS2 setup' >> /home/ros/.bashrc && \
    echo 'source /opt/ros/jazzy/setup.bash' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Auto-source any workspace found in common locations' >> /home/ros/.bashrc && \
    echo 'WORKSPACE_PATHS=("/workspace" "/home/ros/ws" "/ws" "/colcon_ws" "/sigyn_ws")' >> /home/ros/.bashrc && \
    echo 'for ws_path in "${WORKSPACE_PATHS[@]}"; do' >> /home/ros/.bashrc && \
    echo '    if [ -f "$ws_path/install/setup.bash" ]; then' >> /home/ros/.bashrc && \
    echo '        echo "Sourcing workspace: $ws_path"' >> /home/ros/.bashrc && \
    echo '        source "$ws_path/install/setup.bash"' >> /home/ros/.bashrc && \
    echo '        export ROS_WORKSPACE="$ws_path"' >> /home/ros/.bashrc && \
    echo '        break' >> /home/ros/.bashrc && \
    echo '    fi' >> /home/ros/.bashrc && \
    echo 'done' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Sigyn Robot Development Aliases' >> /home/ros/.bashrc && \
    echo '# Build and Package Management' >> /home/ros/.bashrc && \
    echo 'alias cb="colcon build --symlink-install"' >> /home/ros/.bashrc && \
    echo 'alias cb-release="colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release"' >> /home/ros/.bashrc && \
    echo 'alias ct="colcon test"' >> /home/ros/.bashrc && \
    echo 'alias rd="rosdep install --from-paths src --ignore-src -r -y"' >> /home/ros/.bashrc && \
    echo 'alias clean-build="rm -rf build/ install/ log/"' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Navigation and Movement' >> /home/ros/.bashrc && \
    echo 'alias nav="cd /workspace && ros2 launch base nav.launch.py"' >> /home/ros/.bashrc && \
    echo 'alias map="cd /workspace && ros2 launch base map.launch.py"' >> /home/ros/.bashrc && \
    echo 'alias sim="cd /workspace && ros2 launch base sim.launch.py"' >> /home/ros/.bashrc && \
    echo 'alias bringup="cd /workspace && ros2 launch base bringup.launch.py"' >> /home/ros/.bashrc && \
    echo 'alias tele="ros2 run teleop_twist_keyboard teleop_twist_keyboard"' >> /home/ros/.bashrc && \
    echo 'alias pm="ros2 topic pub --rate 10 /cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 0.2}}\""' >> /home/ros/.bashrc && \
    echo 'alias stop="ros2 topic pub --once /cmd_vel geometry_msgs/msg/Twist \"{}\""' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Hardware Interfaces' >> /home/ros/.bashrc && \
    echo 'alias gripper="cd /workspace && ros2 launch gripper gripper.launch.py"' >> /home/ros/.bashrc && \
    echo 'alias sensor="cd /workspace && ros2 launch sigyn_to_sensor sensor.launch.py"' >> /home/ros/.bashrc && \
    echo 'alias boardMonitor="cd /workspace && python3 scripts/boardMonitor.py"' >> /home/ros/.bashrc && \
    echo 'alias teensyMonitor="cd /workspace && python3 scripts/teensyMonitor.py"' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Teensy Development' >> /home/ros/.bashrc && \
    echo 'alias arduino="arduino-ide"' >> /home/ros/.bashrc && \
    echo 'alias pio="platformio"' >> /home/ros/.bashrc && \
    echo 'alias buildBoard1="cd /workspace && source /opt/teensy_venv/bin/activate && python3 scripts/compileAndUploadBoard.py 1"' >> /home/ros/.bashrc && \
    echo 'alias buildBoard2="cd /workspace && source /opt/teensy_venv/bin/activate && python3 scripts/compileAndUploadBoard.py 2"' >> /home/ros/.bashrc && \
    echo 'alias compileBoard1="cd /workspace && source /opt/teensy_venv/bin/activate && python3 scripts/compileBoard.py 1"' >> /home/ros/.bashrc && \
    echo 'alias compileBoard2="cd /workspace && source /opt/teensy_venv/bin/activate && python3 scripts/compileBoard.py 2"' >> /home/ros/.bashrc && \
    echo 'alias uploadBoard1="cd /workspace && source /opt/teensy_venv/bin/activate && python3 scripts/uploadBoard.py 1"' >> /home/ros/.bashrc && \
    echo 'alias uploadBoard2="cd /workspace && source /opt/teensy_venv/bin/activate && python3 scripts/uploadBoard.py 2"' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Debugging and Analysis' >> /home/ros/.bashrc && \
    echo 'alias dla="ros2 daemon log analysis"' >> /home/ros/.bashrc && \
    echo 'alias nodes="ros2 node list"' >> /home/ros/.bashrc && \
    echo 'alias topics="ros2 topic list"' >> /home/ros/.bashrc && \
    echo 'alias services="ros2 service list"' >> /home/ros/.bashrc && \
    echo 'alias params="ros2 param list"' >> /home/ros/.bashrc && \
    echo 'alias fr="ros2 run tf2_tools view_frames"' >> /home/ros/.bashrc && \
    echo 'alias tf-tree="ros2 run tf2_tools view_frames"' >> /home/ros/.bashrc && \
    echo 'alias rqt-graph="rqt_graph"' >> /home/ros/.bashrc && \
    echo 'alias monitor-cpu="htop"' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# System shortcuts' >> /home/ros/.bashrc && \
    echo 'alias ll="ls -la"' >> /home/ros/.bashrc && \
    echo 'alias l="ls -l"' >> /home/ros/.bashrc && \
    echo 'alias ..="cd .."' >> /home/ros/.bashrc && \
    echo 'alias ...="cd ../.."' >> /home/ros/.bashrc && \
    echo 'alias workspace="cd /workspace"' >> /home/ros/.bashrc && \
    echo 'alias ws="cd /workspace"' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Set up bash and ROS2 completion' >> /home/ros/.bashrc && \
    echo 'if command -v colcon >/dev/null 2>&1; then' >> /home/ros/.bashrc && \
    echo '    source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash' >> /home/ros/.bashrc && \
    echo 'fi' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Enable ROS2 command completion' >> /home/ros/.bashrc && \
    echo 'if command -v ros2 >/dev/null 2>&1; then' >> /home/ros/.bashrc && \
    echo '    source /opt/ros/jazzy/share/ros2cli/environment/ros2-argcomplete.bash' >> /home/ros/.bashrc && \
    echo 'fi' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    echo '# Enable general bash completion' >> /home/ros/.bashrc && \
    echo 'if ! shopt -oq posix; then' >> /home/ros/.bashrc && \
    echo '    if [ -f /usr/share/bash-completion/bash_completion ]; then' >> /home/ros/.bashrc && \
    echo '        . /usr/share/bash-completion/bash_completion' >> /home/ros/.bashrc && \
    echo '    elif [ -f /etc/bash_completion ]; then' >> /home/ros/.bashrc && \
    echo '        . /etc/bash_completion' >> /home/ros/.bashrc && \
    echo '    fi' >> /home/ros/.bashrc && \
    echo 'fi' >> /home/ros/.bashrc && \
    echo '' >> /home/ros/.bashrc && \
    chown ros:ros /home/ros/.bashrc

# Create improved entrypoint script that handles both root and non-root execution
RUN echo '#!/bin/bash' > /usr/local/bin/docker-entrypoint.sh && \
    echo 'set -e' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '# Check if running as root' >> /usr/local/bin/docker-entrypoint.sh && \
    echo 'if [ "$EUID" -eq 0 ]; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    # Running as root - can do privileged operations' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    ' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    # Handle user/group ID mapping from environment variables' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    if [ -n "$USER_ID" ] && [ -n "$GROUP_ID" ]; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        current_uid=$(id -u ros)' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        current_gid=$(id -g ros)' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        if [ "$current_uid" != "$USER_ID" ]; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '            echo "Mapping user ID $current_uid -> $USER_ID"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '            usermod -u $USER_ID ros 2>/dev/null || echo "Could not change user ID"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        fi' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        if [ "$current_gid" != "$GROUP_ID" ]; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '            echo "Mapping group ID $current_gid -> $GROUP_ID"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '            groupmod -g $GROUP_ID ros 2>/dev/null || echo "Could not change group ID"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        fi' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        # Fix ownership of home directory' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        chown -R ros:ros /home/ros 2>/dev/null || true' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    fi' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    ' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    # Handle udev rules from mounted workspace' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    for ws_path in /workspace /home/ros/ws /ws /colcon_ws /sigyn_ws; do' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        if [ -d "$ws_path/src" ] && find "$ws_path" -name "*.rules" -type f | head -1 >/dev/null 2>&1; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '            echo "Copying udev rules from workspace: $ws_path"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '            find "$ws_path" -name "*.rules" -exec cp {} /etc/udev/rules.d/ \; 2>/dev/null || echo "Could not copy udev rules"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '            break' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        fi' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    done' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    ' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    # Switch to ros user and execute command' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    if [ "$#" -eq 0 ]; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        exec gosu ros bash' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    else' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        exec gosu ros "$@"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    fi' >> /usr/local/bin/docker-entrypoint.sh && \
    echo 'else' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    # Already running as non-root user (probably ros)' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    echo "Running as user: $(whoami) ($(id))"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    ' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    # Execute command directly (no gosu needed)' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    if [ "$#" -eq 0 ]; then' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        exec bash' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    else' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '        exec "$@"' >> /usr/local/bin/docker-entrypoint.sh && \
    echo '    fi' >> /usr/local/bin/docker-entrypoint.sh && \
    echo 'fi' >> /usr/local/bin/docker-entrypoint.sh && \
    chmod +x /usr/local/bin/docker-entrypoint.sh

# Create CycloneDDS configuration for network interface enp37s0
RUN mkdir -p /home/ros/.ros && \
    echo '<?xml version="1.0" encoding="UTF-8" ?>' > /home/ros/.ros/cyclonedds_config.xml && \
    echo '<CycloneDDS>' >> /home/ros/.ros/cyclonedds_config.xml && \
    echo '    <Domain>' >> /home/ros/.ros/cyclonedds_config.xml && \
    echo '        <General>' >> /home/ros/.ros/cyclonedds_config.xml && \
    echo '            <NetworkInterfaceAddress>enp37s0</NetworkInterfaceAddress>' >> /home/ros/.ros/cyclonedds_config.xml && \
    echo '            <AllowMulticast>true</AllowMulticast>' >> /home/ros/.ros/cyclonedds_config.xml && \
    echo '            <MaxMessageSize>65500</MaxMessageSize>' >> /home/ros/.ros/cyclonedds_config.xml && \
    echo '        </General>' >> /home/ros/.ros/cyclonedds_config.xml && \
    echo '        <Discovery>' >> /home/ros/.ros/cyclonedds_config.xml && \
    echo '            <ParticipantIndex>auto</ParticipantIndex>' >> /home/ros/.ros/cyclonedds_config.xml && \
    echo '        </Discovery>' >> /home/ros/.ros/cyclonedds_config.xml && \
    echo '    </Domain>' >> /home/ros/.ros/cyclonedds_config.xml && \
    echo '</CycloneDDS>' >> /home/ros/.ros/cyclonedds_config.xml && \
    chown -R ros:ros /home/ros/.ros

# Set CycloneDDS configuration environment variable
ENV CYCLONEDDS_URI=file:///home/ros/.ros/cyclonedds_config.xml

# Set the user and working directory
USER ros
WORKDIR /home/ros

# Set the entrypoint
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
CMD ["bash"]
