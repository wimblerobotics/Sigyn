<?xml version="1.0"?>
<root BTCPP_format="4">
  <!--
    Example reactive behavior tree that demonstrates how to handle interruptions
    during navigation. The tree will:
    1. Check battery level before navigating
    2. Navigate to target pose
    3. Handle low battery interruptions by going to charge
    4. Resume navigation after charging (if goal was interrupted)
  -->
  
  <BehaviorTree ID="ReactiveNavigation">
    <ReactiveFallback>
      
      <!-- Priority 1: Check if battery is critically low -->
      <Sequence name="HandleLowBattery">
        <CheckBatteryState low_battery_threshold="20.0"/>
        <NavigateToPose target_pose="{charging_pose}" behavior_tree="" timeout="60.0" 
                       goal_interrupted="{was_nav_interrupted}"/>
        <AlwaysSuccess name="ChargingComplete"/> <!-- In practice, this would wait for full charge -->
      </Sequence>
      
      <!-- Priority 2: Main navigation task -->
      <Sequence name="MainNavigation">
        <!-- Check if we need to resume an interrupted goal -->
        <Fallback>
          <!-- If previous navigation was interrupted, resume with same target -->
          <Sequence name="ResumeInterruptedNav">
            <CheckGoalInterrupted was_interrupted="{was_nav_interrupted}"/>
            <NavigateToPose target_pose="{target_pose}" behavior_tree="" timeout="120.0" 
                           goal_interrupted="{was_nav_interrupted}"/>
          </Sequence>
          
          <!-- Otherwise, start new navigation -->
          <NavigateToPose target_pose="{target_pose}" behavior_tree="" timeout="120.0" 
                         goal_interrupted="{was_nav_interrupted}"/>
        </Fallback>
        
        <AlwaysSuccess name="NavigationComplete"/>
      </Sequence>
      
    </ReactiveFallback>
  </BehaviorTree>

  <!-- Alternative approach: Using a parallel node for continuous monitoring -->
  <BehaviorTree ID="ParallelMonitoring">
    <Parallel success_threshold="1" failure_threshold="1">
      
      <!-- Continuous battery monitoring -->
      <ReactiveSequence name="BatteryMonitor">
        <CheckBatteryState low_battery_threshold="20.0"/>
        <AlwaysFailure name="TriggerRecharge"/> <!-- Forces re-evaluation -->
      </ReactiveSequence>
      
      <!-- Main navigation task -->
      <NavigateToPose target_pose="{target_pose}" behavior_tree="" timeout="300.0" 
                     goal_interrupted="{was_nav_interrupted}"/>
      
    </Parallel>
  </BehaviorTree>

</root>
